{"version":3,"sources":["logo.svg","Worker.js","Editing.js","App.js","Adding.js","serviceWorker.js","index.js"],"names":["module","exports","Worker","props","classes","this","worker","marked","push","d","birthDate","className","join","onClick","onMark","name","post","getDate","parseInt","getMonth","getFullYear","gender","type","defaultChecked","fired","React","Component","Editing","state","id","handleFormChange","e","target","value","setState","handlePostChange","valueInt","handleFiredChange","checked","handleBirthChange","valueAsNumber","Date","onSubmit","handleSave","required","placeholder","defaultValue","onChange","posts","map","key","Math","random","App","workers","visible","appTitle","editWorker","updatedWorker","workerIndex","findIndex","newWorkers","concat","addWorker","workerIds","length","max","event","console","log","find","w","p","handleMarked","bind","slice","filter","workerD","title","trim","actualName","toggleHandler","style","marginRight","titleChangeHandler","colSpan","align","renderWorkers","renderEditing","deleting","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.695e773a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport './styles.css'\r\nexport class Worker extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render(){\r\n        const classes = ['card']\r\n        if (this.props.worker.marked) {\r\n            classes.push('marked')\r\n        }\r\n        let d = this.props.worker.birthDate\r\n        return (\r\n            <div className={classes.join(' ')} onClick={this.props.onMark}>\r\n                <h4><u>ФИО</u>{': '}{this.props.worker.name}</h4>\r\n                <p><u>Должность</u>{': '}{this.props.post.name}</p>\r\n                <p><u>Дата рождения</u>{': '}{d.getDate() + \".\" + (parseInt(d.getMonth(), 10) + 1) + \".\" + d.getFullYear()}</p>\r\n                <p><u>Пол</u>{': '}{this.props.worker.gender === \"MALE\" ? 'Мужской' : 'Женский'}</p>\r\n                <p><u>Уволен</u>{': '}{<input type=\"checkbox\" defaultChecked={this.props.worker.fired} />}</p>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport './styles.css'\r\nexport class Editing extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    state = {\r\n        id: this.props.worker.id,\r\n        name: this.props.worker.name,\r\n        birthDate: this.props.worker.birthDate,\r\n        post: this.props.worker.post,\r\n        gender: this.props.worker.gender,\r\n        fired: this.props.worker.fired,\r\n        marked: this.props.worker.marked\r\n    }\r\n\r\n    handleFormChange = (e) => {\r\n        const { name, value } = e.target;\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    handlePostChange = (e) => {\r\n        const { name, value } = e.target;\r\n        let valueInt = parseInt(value)\r\n        this.setState({\r\n            [name]: valueInt,\r\n        })\r\n    }\r\n\r\n    handleFiredChange = (e) => {\r\n        const { name, checked } = e.target;\r\n        this.setState({\r\n            [name]: checked,\r\n        })\r\n    }\r\n\r\n    handleBirthChange = (e) => {\r\n        const { name, valueAsNumber } = e.target;\r\n        let d = new Date(valueAsNumber);\r\n        this.setState({\r\n            [name]: d,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"cardToEdit\">\r\n                <form onSubmit={() => this.props.handleSave(this.state)}>\r\n                    <h4>\r\n                        <u>\r\n                            ФИО\r\n                        </u>\r\n                        {': '}\r\n                        <input\r\n                            className=\"inputName\"\r\n                            required\r\n                            name=\"name\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter name\"\r\n                            defaultValue={this.props.worker.name}\r\n                            onChange={this.handleFormChange}\r\n                        />\r\n                    </h4>\r\n                    <p>\r\n                        <u>\r\n                            Должность\r\n                        </u>\r\n                        {': '}\r\n                        <select\r\n                            className=\"inputPost\"\r\n                            required\r\n                            name=\"post\"\r\n                            onChange={this.handlePostChange}>\r\n                            {this.props.posts.map((post) => {\r\n                                return (\r\n                                    <option value={post.id} key={post.id + Math.random()}>{post.name}</option>\r\n                                )\r\n                            })\r\n                            }\r\n                        </select>\r\n                    </p>\r\n                    <p>\r\n                        <u>\r\n                            Дата рождения\r\n                        </u>\r\n                        {': '}\r\n                        <input\r\n                            type=\"date\"\r\n                            name=\"birthDate\"\r\n                            onChange={this.handleBirthChange}\r\n\r\n                        />\r\n                    </p>\r\n                    <p>\r\n                        <u>\r\n                            Пол\r\n                        </u>\r\n                        {': '}\r\n                        <input\r\n                            type=\"radio\"\r\n                            value=\"MALE\"\r\n                            name=\"gender\"\r\n                            defaultChecked={this.props.worker.gender == 'MALE' ? true : false}\r\n                            onChange={this.handleFormChange}\r\n                        />\r\n                        Мужской\r\n                        <input\r\n                            type=\"radio\"\r\n                            value=\"FEMALE\"\r\n                            name=\"gender\"\r\n                            defaultChecked={this.props.worker.gender == 'FEMALE' ? true : false}\r\n                            onChange={this.handleFormChange}\r\n                        />\r\n                        Женский\r\n                    </p>\r\n                    <p>\r\n                        <u>\r\n                            Уволен\r\n                        </u>\r\n                        {': '}\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            name=\"fired\"\r\n                            defaultChecked={this.props.worker.fired}\r\n                            onChange={this.handleFiredChange}\r\n                        />\r\n                    </p>\r\n                    <button type=\"submit\">\r\n                        Сохранить\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { useReducer } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Worker} from './Worker'\nimport {Editing} from './Editing'\nimport {Adding} from './Adding'\nimport './styles.css'\n\nclass App extends React.Component{\n  state = {\n      posts: [\n          {id: 0, name: 'Нет'},\n          {id: 1, name: 'developer'},\n          {id: 2, name: 'analyst'},\n          {id: 3, name: 'hr-manager'},\n          {id: 4, name: 'tester'},\n          {id: 5, name: 'translator'},\n          {id: 6, name: 'program manager'},\n          {id: 7, name: 'architect'},\n      ],\n      workers: [\n          {id: 1, fired: true, marked: false, name: 'Нуреев Марсель Ринатович', post: 1, birthDate: new Date('November 27, 1998'), gender: 'MALE'},\n          {id: 2, fired: false, marked: false, name: 'Курицына Елизавета Юрьевна', post: 2, birthDate: new Date('September 16, 1999'), gender: 'FEMALE'},\n          {id: 3, fired: false, marked: false, name: 'Лепихин Вадим Владимирович', post: 3, birthDate: new Date('April 5, 1999'), gender: 'MALE'},\n          {id: 4, fired: false, marked: false, name: 'Субботин Алексей Сергеевич', post: 4, birthDate: new Date('August 14, 1999'), gender: 'MALE'},\n          {id: 5, fired: false, marked: false, name: 'Цыганков Анатолий Олегович', post: 2, birthDate: new Date('February 27, 1999'), gender: 'MALE'},\n          {id: 6, fired: false, marked: false, name: 'Рязанов Ивань Дмитриевич', post: 1, birthDate: new Date('June 7, 1999'), gender: 'MALE'}\n      ],\n      visible: true,\n      appTitle: 'Workers application'\n  }\n\n  setGender(event) {\n      console.log(event.target.value);\n  }\n\n  handleMarked(id){\n      const workers = this.state.workers.concat()\n\n      const worker = workers.find(w => w.id === id)\n      worker.marked = !worker.marked\n\n      this.setState({workers})\n  }\n\n  toggleHandler(){\n      this.setState({visible: !this.state.visible})\n  }\n\n  renderWorkers(){\n    console.log(this.state.workers)\n      if (!this.state.visible)\n          return null\n      return this.state.workers.map(worker => {\n          return (\n              <Worker worker={worker}\n              post={this.state.posts[this.state.posts.findIndex((p) => {\n                   return p.id === worker.post \n                })]}\n              key={worker.id + Math.random()} \n              onMark={this.handleMarked.bind(this, worker.id)}\n              /> \n          )\n      })\n  }\n  \n  editWorker = (updatedWorker) => {\n    const workerIndex = this.state.workers.findIndex((worker) => {\n      return worker.id === updatedWorker.id;\n    });\n    const newWorkers = this.state.workers.concat();\n    newWorkers[workerIndex] = updatedWorker;\n    this.setState({\n      workers: newWorkers\n    });\n\n  }\n\n  addWorker = () => {\n      const {workers} = this.state\n      const worker = {id: null, fired: false, marked: true, name: '', post: 0, birthDate: new Date(0), gender: ''}\n          let workerIds = workers.map(worker => worker.id)\n          if (workerIds.length > 0){\n              worker.id = Math.max(...workerIds) + 1\n          }\n          else{\n              worker.id = 1\n          }\n      \n      this.setState({\n          workers: [...workers, worker]\n      })\n  }\n\n  \n\n  renderEditing(){\n      return this.state.workers.map(worker => {\n            if (worker.marked ){\n                return (\n                    <Editing worker = {worker}\n                    posts={this.state.posts.slice(1)}\n                    key={worker.id + Math.random()}\n                    handleSave={this.editWorker}\n                    />\n                )\n            }\n          }\n      )\n  }\n\n  \n\n  deleting(){\n      return this.state.workers.map(worker => {\n          if (worker.marked){\n              this.setState({\n                  workers: this.state.workers.filter(workerD => {\n                      return (workerD.marked == false)\n                  })\n              })\n          }\n      })\n  }\n\n\n  /* renderAdding(){\n      \n      return this.state.workers.map(worker => {\n          if(worker.id == this.state.workers.length - 1){\n          return (\n            <Editing worker = {worker}\n            key={worker.name + Math.random()}\n            handleSave={this.editWorker}\n            />\n        )}\n    })\n  } */\n\n  titleChangeHandler(title){\n      if (this.state.appTitle.workers.trim() === '')\n          return \n      this.setState({\n          appTitle: title\n      })\n  }\n\n  nameChangeHandler(name, actualName){\n      const workers = this.state.workers.concat()\n\n      const worker = workers.find(w => w.name === name)\n      if (name.trim() === ''){\n          return this.setState(\n              {workers}\n          )\n          }\n  }\n  render() {\n      const style = {\n          marginRight: 20\n      }\n\n      return (\n          <div className=\"app\">\n\n              <h1>{this.state.appTitle}</h1>\n              <button \n              onClick={() => this.toggleHandler()}\n              style={style}\n              >Toggle</button>\n\n              <input\n                  type=\"text\"\n                  placeholder=\"Change title\"\n                  onChange={(event) => this.titleChangeHandler(event.target.value)}\n                  value={this.state.appTitle}\n              />\n\n              <hr/>\n\n              <table>\n                  <thead>\n                      <tr>\n                          <th colSpan=\"2\" align=\"center\">Сотрудники</th>\n                      </tr>\n                  </thead>\n                  <tbody>\n                      <tr>\n                          <td>\n                              <div>\n                                  {this.renderWorkers()}\n                              </div>\n                          </td>\n                          <td id=\"verticalTop\">\n                              <div>\n                                  {this.renderEditing()}\n                                  {console.log(this.state.workers)}\n                              </div>\n                          </td>\n                      </tr>\n                      <tr>\n                          <td>\n                              <button onClick={() => this.addWorker()}>\n                                  Добавить нового сотрудника\n                              </button>\n                              <button onClick={() => this.deleting()}>\n                                  Удалить сотрудника\n                              </button>\n                          </td>\n                      </tr>\n                  </tbody>\n              </table>                \n              \n          </div>\n      )\n  }\n}\n\nexport default App;\n","import React from 'react'\r\nimport './styles.css'\r\nexport class Editing extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    state = {\r\n        id: this.props.worker.id,\r\n        name: this.props.worker.name,\r\n        birthDate: this.props.worker.birthDate,\r\n        post: this.props.worker.post,\r\n        gender: this.props.worker.gender,\r\n        fired: this.props.worker.fired\r\n    }\r\n\r\n    handleFormChange = (e) => {\r\n        const {name, value} = e.target;\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    handleFiredChange = (e) => {\r\n        const {name, checked} = e.target;\r\n        this.setState({\r\n            [name]: checked,\r\n        })\r\n    }\r\n\r\n    handleBirthChange = (e) => {\r\n        const { name, valueAsNumber } = e.target;\r\n        let d = new Date(valueAsNumber);\r\n        //console.log(new Date(d))\r\n        this.setState({\r\n            [name]: d,\r\n        })\r\n        console.log(this.state)\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"cardToEdit\">\r\n                <h4> \r\n                    <u>\r\n                        ФИО:\r\n                    </u>\r\n                    {' '}\r\n                    <input \r\n                        required \r\n                        name=\"name\"\r\n                        type=\"text\"\r\n                        placeholder=\"Enter name\"\r\n                        defaultValue={this.props.worker.name}\r\n                        onChange={this.handleFormChange}\r\n                    />\r\n                </h4>\r\n                <p>\r\n                    <u>\r\n                        Должность:\r\n                    </u>\r\n                    {' '}\r\n                    <input \r\n                        required\r\n                        name=\"post\"\r\n                        type=\"text\"\r\n                        placeholder=\"Enter post\"\r\n                        defaultValue={this.props.worker.post}\r\n                        onChange={this.handleFormChange}\r\n                    />\r\n                </p>\r\n                <p>\r\n                    <u>\r\n                        Дата рождения:\r\n                    </u>\r\n                    {' '}\r\n                    <input\r\n                        type=\"date\"\r\n                        name=\"birthDate\"\r\n                        //defaultValue={this.props.worker.birthDate}\r\n                        onChange={this.handleBirthChange}\r\n                    />\r\n                </p>\r\n                <p>\r\n                    <u>\r\n                        Пол: \r\n                    </u>\r\n                    {' '}\r\n                    <input \r\n                        type=\"radio\" \r\n                        value=\"MALE\" \r\n                        name=\"gender\"\r\n                        defaultChecked={this.props.worker.gender == 'MALE' ? true : false}\r\n                        onChange={this.handleFormChange}\r\n                    />\r\n                    Мужской\r\n                    <input \r\n                        type=\"radio\" \r\n                        value=\"FEMALE\" \r\n                        name=\"gender\"\r\n                        defaultChecked={this.props.worker.gender == 'FEMALE' ? true : false}\r\n                        onChange={this.handleFormChange}\r\n                    />\r\n                    Женский\r\n                </p>\r\n                <p>\r\n                    <u>\r\n                        Уволен:\r\n                    </u>\r\n                    {' '}\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        name=\"fired\"\r\n                        defaultChecked={this.props.worker.fired}\r\n                        onChange={this.handleFiredChange}\r\n                    />\r\n                </p>\r\n                <button onClick={() => this.props.handleSave(this.state)}>\r\n                    Сохранить\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}